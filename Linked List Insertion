#include <iostream>
#include <cstdlib>
using namespace std;
struct Node{
int data;
struct Node* next;
};
void display(struct Node* ptr){
    while(ptr!=NULL){
        cout<<"Element : "<<ptr->data<<endl;
        ptr=ptr->next;
    }
}
struct Node* insertAtFirst(struct Node* Head,int data){
    struct Node* ptr=(struct Node*)malloc(sizeof(struct Node));
    // Node* ptr = new Node();
    ptr->data=data;    
    ptr->next=Head;
    return ptr;
}
struct Node* insertAtIndex(struct Node* Head,int data,int index){
    struct Node* ptr=(struct Node*)malloc(sizeof(struct Node));
    struct Node* p=Head;
    int i=0;
    ptr->data=data;
    while(i!=index-1){
        p=p->next;
        i++;
    }
    ptr->next=p->next;
    p->next=ptr;
    return Head;
}
struct Node* insertAtEnd(struct Node* Head,int data){
    struct Node* ptr=(struct Node*)malloc(sizeof(struct Node));
    struct Node* p=Head;
    ptr->data=data;
    while(p->next!=NULL){
        p=p->next;
    }
    p->next=ptr;
    ptr->next=NULL;
    return Head;
}
struct Node* insertAfterNode(struct Node* Head,struct Node* prevNode,int data){
    struct Node* ptr=(struct Node*)malloc(sizeof(struct Node));
    ptr->data=data;
    ptr->next=prevNode->next;
    prevNode->next=ptr;
    return Head;
}
int main(){
   struct Node* Head;
   struct Node* Second;
   struct Node* Third;
   struct Node* Fourth;
    Head= (struct Node*)malloc(sizeof(struct Node));
    Second= (struct Node*)malloc(sizeof(struct Node));
    Third= (struct Node*)malloc(sizeof(struct Node));
    Fourth= (struct Node*)malloc(sizeof(struct Node));
    // Head = new Node();
    // Second = new Node();
    // Third = new Node();
    // Fourth = new Node();
    Head->data=78;
    Head->next=Second;
    Second->data=43;
    Second->next=Third;
    Third->data=37;
    Third->next=Fourth;
    Fourth->data=24;
    Fourth->next=NULL;
    display(Head);
    cout<<endl;
    // Head=insertAtFirst(Head,45);
    //Head=insertAtIndex(Head,45,3);
    //Head=insertAtEnd(Head,45);
    Head=insertAfterNode(Head,Second,45);
    display(Head);
    return 0;
}
